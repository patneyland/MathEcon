for (i in 1:(length(time)-1)){
x[i+1] = x[i] + 0.5 * f(x[i])
}
# plotting
plot(x~time)
curve(0.1 * exp(x)/(1+0.1*(exp(x)-1.)), add=T)
legend("topleft", c("approximation", "analytical"),
pch=c(1,NA), lty=c(NA,1))
# time intervals: a sequence from zero to ten at 0.5 steps
time <- seq(0, 10, by = 0.5)
# initial condition
r <- 5
x0 <- 0.1
## The function to be integrated (right-hand expression of the derivative above)
f <- function(x){r*x + s*w}
## An empty R vector to store the results
x <- c()
## Store the initial condition in the first position of the vector
x[1] <- x0
# loop over time: approximate the function at each time step
for (i in 1:(length(time)-1)){
x[i+1] = x[i] + 0.5 * f(x[i])
}
# time intervals: a sequence from zero to ten at 0.5 steps
time <- seq(0, 10, by = 0.5)
# initial condition
r <- 5
s <- 0.1
w <- 50000
x0 <- 0.1
## The function to be integrated (right-hand expression of the derivative above)
f <- function(x){r*x + s*w}
## An empty R vector to store the results
x <- c()
## Store the initial condition in the first position of the vector
x[1] <- x0
# loop over time: approximate the function at each time step
for (i in 1:(length(time)-1)){
x[i+1] = x[i] + 0.5 * f(x[i])
}
# plotting
plot(x~time)
curve(0.1 * exp(x)/(1+0.1*(exp(x)-1.)), add=T)
legend("topleft", c("approximation", "analytical"),
pch=c(1,NA), lty=c(NA,1))
# time intervals: a sequence from zero to ten at 0.5 steps
time <- seq(0, 10, by = 0.1)
# time intervals: a sequence from zero to ten at 0.5 steps
time <- seq(0, 55, by = 0.1)
# initial condition
r <- 5
s <- 0.1
w <- 50000
x0 <- 0.1
## The function to be integrated (right-hand expression of the derivative above)
f <- function(x){r*x + s*w}
## An empty R vector to store the results
x <- c()
## Store the initial condition in the first position of the vector
x[1] <- x0
# loop over time: approximate the function at each time step
for (i in 1:(length(time)-1)){
x[i+1] = x[i] + 0.5 * f(x[i])
}
# plotting
plot(x~time)
curve(0.1 * exp(x)/(1+0.1*(exp(x)-1.)), add=T)
legend("topleft", c("approximation", "analytical"),
pch=c(1,NA), lty=c(NA,1))
# time intervals: a sequence from zero to ten at 0.5 steps
time <- seq(0, 55, by = 0.1)
# initial condition
r <- 0.05
s <- 0.1
w <- 50000
x0 <- 0.1
## The function to be integrated (right-hand expression of the derivative above)
f <- function(x){r*x + s*w}
## An empty R vector to store the results
x <- c()
## Store the initial condition in the first position of the vector
x[1] <- x0
# loop over time: approximate the function at each time step
for (i in 1:(length(time)-1)){
x[i+1] = x[i] + 0.5 * f(x[i])
}
# plotting
plot(x~time)
curve(0.1 * exp(x)/(1+0.1*(exp(x)-1.)), add=T)
legend("topleft", c("approximation", "analytical"),
pch=c(1,NA), lty=c(NA,1))
# time intervals: a sequence from zero to ten at 0.5 steps
time <- seq(0, 55, by = 0.1)
# initial condition
r <- 0.05
s <- 0.1
w <- 50000
x0 <- 0.1
## The function to be integrated (right-hand expression of the derivative above)
f1 <- function(x){r*x + s*w}
## An empty R vector to store the results
x <- c()
## Store the initial condition in the first position of the vector
x[1] <- x0
# loop over time: approximate the function at each time step
for (i in 1:(length(time)-1)){
x[i+1] = x[i] + 0.5 * f1(x[i])
}
# plotting
plot(x~time)
curve(0.1 * exp(x)/(1+0.1*(exp(x)-1.)), add=T)
legend("topleft", c("approximation", "analytical"),
pch=c(1,NA), lty=c(NA,1))
# time intervals: a sequence from zero to ten at 0.5 steps
time <- seq(0, 55, by = 0.1)
# initial condition
r <- 0.05
s <- 0.1
w <- 50000
A <- (s*w)/r^2*exp(-r)
x0 <- 0.1
## The function to be integrated (right-hand expression of the derivative above)
f1 <- function(x){r*x + s*w}
f2 <- function(x){r*x - A}
## An empty R vector to store the results
x <- c()
## Store the initial condition in the first position of the vector
x[1] <- x0
# loop over time: approximate the function at each time step
for (i in 1:(length(time)-1)){
x[i+1] = x[i] + 0.5 * f1(x[i])
}
# plotting
plot(x~time)
curve(0.1 * exp(x)/(1+0.1*(exp(x)-1.)), add=T)
legend("topleft", c("approximation", "analytical"),
pch=c(1,NA), lty=c(NA,1))
# time intervals: a sequence from zero to ten at 0.5 steps
time <- seq(0, 55, by = 0.1)
# initial condition
r <- 0.05
s <- 0.1
w <- 50000
A <- (s*w)/r^2*exp(-r)
x0 <- 0.1
## The function to be integrated (right-hand expression of the derivative above)
f1 <- function(x){r*x + s*w}
f2 <- function(x){r*x - A}
## An empty R vector to store the results
x <- c()
## Store the initial condition in the first position of the vector
x[1] <- x0
# loop over time: approximate the function at each time step
for (i in 1:(length(time)-1)){
x[i+1] = x[i] + 0.1 * f1(x[i])
}
# plotting
plot(x~time)
curve(0.1 * exp(x)/(1+0.1*(exp(x)-1.)), add=T)
legend("topleft", c("approximation", "analytical"),
pch=c(1,NA), lty=c(NA,1))
# time intervals: a sequence from zero to ten at 0.5 steps
time1 <- seq(0, 55, by = 0.1)
time2
# time intervals: a sequence from zero to ten at 0.5 steps
time1 <- seq(0, 40, by = 0.1)
time2 <- seq(40, 55, by = 0.1)
# initial condition
r <- 0.05
s <- 0.1
w <- 50000
A <- (s*w)/r^2*exp(-r)
x0 <- 0.1
## The function to be integrated (right-hand expression of the derivative above)
f1 <- function(x){r*x + s*w}
f2 <- function(x){r*x - A}
## An empty R vector to store the results
x <- c()
## Store the initial condition in the first position of the vector
x[1] <- x0
# loop over time: approximate the function at each time step
for (i in 1:(length(time1)-1)){
x[i+1] = x[i] + 0.1 * f1(x[i])
}
for (i in 1:(length(time2)-1)){
x[i+1] = x[i] + 0.1 * f1(x[i])
}
# plotting
plot(x~time1+time2)
# time intervals: a sequence from zero to ten at 0.5 steps
time1 <- seq(0, 40, by = 0.1)
time2 <- seq(40, 55, by = 0.1)
# initial condition
r <- 0.05
s <- 0.1
w <- 50000
A <- (s*w)/r^2*exp(-r)
x0 <- 0.1
## The function to be integrated (right-hand expression of the derivative above)
f1 <- function(x){r*x + s*w}
f2 <- function(x){r*x - A}
## An empty R vector to store the results
x <- c()
## Store the initial condition in the first position of the vector
x[1] <- x0
# loop over time: approximate the function at each time step
for (i in 1:(length(time1)-1)){
x[i+1] = x[i] + 0.1 * f1(x[i])
}
for (i in 1:(length(time2)-1)){
x[i+1] = x[i] + 0.1 * f1(x[i])
}
# plotting
plot(x~time1)
curve(0.1 * exp(x)/(1+0.1*(exp(x)-1.)), add=T)
legend("topleft", c("approximation", "analytical"),
pch=c(1,NA), lty=c(NA,1))
# time intervals: a sequence from zero to ten at 0.5 steps
time1 <- seq(0, 40, by = 0.1)
time2 <- seq(40, 55, by = 0.1)
# initial condition
r <- 0.05
s <- 0.1
w <- 50000
A <- (s*w)/r^2*exp(-r)
x0 <- 0.1
## The function to be integrated (right-hand expression of the derivative above)
f1 <- function(x){r*x + s*w}
f2 <- function(x){r*x - A}
## An empty R vector to store the results
x <- c()
## Store the initial condition in the first position of the vector
x[1] <- x0
# loop over time: approximate the function at each time step
for (i in 1:(length(time1)-1)){
x[i+1] = x[i] + 0.1 * f1(x[i])
}
for (i in 1:(length(time2)-1)){
x[i+1] = x[i] + 0.1 * f1(x[i])
}
# plotting
plot(x~time1)
plot(x~time2)
# time intervals: a sequence from zero to ten at 0.5 steps
time1 <- seq(0, 40, by = 0.1)
time2 <- seq(40, 55, by = 0.1)
# initial condition
r <- 0.05
s <- 0.1
w <- 50000
A <- (s*w)/r^2*exp(-r)
x0 <- 0.1
## The function to be integrated (right-hand expression of the derivative above)
f1 <- function(x){r*x + s*w}
f2 <- function(x){r*x - A}
## An empty R vector to store the results
x <- c()
## Store the initial condition in the first position of the vector
x[1] <- x0
# loop over time: approximate the function at each time step
for (i in 1:(length(time1)-1)){
x[i+1] = x[i] + 0.1 * f1(x[i])
}
# plotting
plot(x~time1)
plot(x~time2)
# time intervals: a sequence from zero to ten at 0.5 steps
time1 <- seq(0, 40, by = 0.1)
time2 <- seq(40, 55, by = 0.1)
# initial condition
r <- 0.05
s <- 0.1
w <- 50000
A <- (s*w)/r^2*exp(-r)
x0 <- 0.1
## The function to be integrated (right-hand expression of the derivative above)
f1 <- function(x){r*x + s*w}
f2 <- function(x){r*x - A}
## An empty R vector to store the results
x <- c()
## Store the initial condition in the first position of the vector
x[1] <- x0
# loop over time: approximate the function at each time step
for (i in 1:(length(time1)-1)){
x[i+1] = x[i] + 0.1 * f1(x[i])
}
# plotting
plot(x~time1)
curve(0.1 * exp(x)/(1+0.1*(exp(x)-1.)), add=T)
legend("topleft", c("approximation", "analytical"),
pch=c(1,NA), lty=c(NA,1))
# time intervals: a sequence from zero to ten at 0.5 steps
time1 <- seq(0, 40, by = 0.1)
time2 <- seq(40, 55, by = 0.1)
# initial condition
r <- 0.05
s <- 0.1
w <- 50000
A <- (s*w)/r^2*exp(-r)
x0 <- 0.1
## The function to be integrated (right-hand expression of the derivative above)
f1 <- function(x){r*x + s*w}
f2 <- function(x){r*x - A}
## An empty R vector to store the results
x <- c()
## Store the initial condition in the first position of the vector
x[1] <- x0
# loop over time: approximate the function at each time step
for (i in 1:(length(time1)-1)){
x[i+1] = x[i] + 0.1 * f1(x[i])
}
# plotting
plot(x~time1)
# time intervals: a sequence from zero to ten at 0.5 steps
time1 <- seq(0, 40, by = 0.1)
time2 <- seq(40, 55, by = 0.1)
# initial condition
r <- 0.05
s <- 0.1
w <- 50000
A <- (s*w)/r^2*exp(-r)
x0 <- 0.1
## The function to be integrated (right-hand expression of the derivative above)
f1 <- function(x){r*x + s*w}
f2 <- function(x){r*x - A}
## An empty R vector to store the results
x <- c()
## Store the initial condition in the first position of the vector
x[1] <- x0
# loop over time: approximate the function at each time step
for (i in 1:(length(time1)-1)){
x[i+1] = x[i] + 0.1 * f1(x[i])
}
# plotting
plot(x~time1)
curve(add=T)
# time intervals: a sequence from zero to ten at 0.5 steps
time1 <- seq(0, 40, by = 0.1)
time2 <- seq(40, 55, by = 0.1)
# initial condition
r <- 0.05
s <- 0.1
w <- 50000
A <- (s*w)/r^2*exp(-r)
x0 <- 0.1
## The function to be integrated (right-hand expression of the derivative above)
f1 <- function(x){r*x + s*w}
f2 <- function(x){r*x - A}
## An empty R vector to store the results
x <- c()
## Store the initial condition in the first position of the vector
x[1] <- x0
# loop over time: approximate the function at each time step
for (i in 1:(length(time1)-1)){
x[i+1] = x[i] + 0.1 * f1(x[i])
}
# plotting
plot(x~time1)
legend("topleft", c("approximation"),
pch=c(1,NA), lty=c(NA,1))
# time intervals: a sequence from zero to ten at 0.5 steps
time1 <- seq(0, 40, by = 0.1)
time2 <- seq(40, 55, by = 0.1)
# initial condition
r <- 0.05
s <- 0.1
w <- 50000
A <- (s*w)/r^2*exp(-r)
x0 <- 0.1
## The function to be integrated (right-hand expression of the derivative above)
f1 <- function(x){r*x + s*w}
f2 <- function(x){r*x - A}
## An empty R vector to store the results
x <- c()
## Store the initial condition in the first position of the vector
x[1] <- x0
# loop over time: approximate the function at each time step
for (i in 1:(length(time1)-1)){
x[i+1] = x[i] + 1 * f1(x[i])
}
# plotting
plot(x~time1)
legend("topleft", c("approximation"),
pch=c(1,NA), lty=c(NA,1))
# time intervals: a sequence from zero to ten at 0.5 steps
time1 <- seq(0, 40, by = 0.1)
time2 <- seq(40, 55, by = 0.1)
# initial condition
r <- 0.05
s <- 0.1
w <- 50000
A <- (s*w)/r^2*exp(-r)
x0 <- 0.1
## The function to be integrated (right-hand expression of the derivative above)
f1 <- function(x){r*x + s*w}
f2 <- function(x){r*x - A}
## An empty R vector to store the results
x <- c()
## Store the initial condition in the first position of the vector
x[1] <- x0
# loop over time: approximate the function at each time step
for (i in 1:(length(time1)-1)){
x[i+1] = x[i] + 0.1 * f1(x[i])
}
# plotting
plot(x~time1)
legend("topleft", c("approximation"),
pch=c(1,NA), lty=c(NA,1))
# time intervals: a sequence from zero to ten at 0.5 steps
time <- seq(0, 55, by = 0.1)
time2 <- seq(40, 55, by = 0.1)
# initial condition
r <- 0.05
s <- 0.1
w <- 50000
A <- (s*w)/r^2*exp(-r)
x0 <- 0.1
## The function to be integrated (right-hand expression of the derivative above)
f1 <- function(x){
if(time<=40){r*x + s*w}
else {r*x - A}
}
## An empty R vector to store the results
x <- c()
## Store the initial condition in the first position of the vector
x[1] <- x0
# loop over time: approximate the function at each time step
for (i in 1:(length(time)-1)){
x[i+1] = x[i] + 0.1 * f1(x[i])
}
# plotting
plot(x~time)
legend("topleft", c("approximation"),
pch=c(1,NA), lty=c(NA,1))
# time intervals: a sequence from zero to ten at 0.5 steps
time <- seq(0, 55, by = 0.1)
time2 <- seq(40, 55, by = 0.1)
# initial condition
r <- 0.05
s <- 0.1
w <- 50000
A <- (s*w)/r^2*exp(-r)
x0 <- 0.1
## The function to be integrated (right-hand expression of the derivative above)
f1 <- function(x){
if(time<=40){r*x + s*w}
else {r*x - A}
}
## An empty R vector to store the results
x <- c()
## Store the initial condition in the first position of the vector
x[1] <- x0
# loop over time: approximate the function at each time step
for (i in 1:(length(time)-1)){
x[i+1] = x[i] + 0.1 * f1(x[i])
}
# plotting
plot(x~time)
legend("topleft", c("approximation"),
pch=c(1,NA), lty=c(NA,1))
# time intervals: a sequence from zero to ten at 0.5 steps
time <- seq(0, 55, by = 0.1)
time2 <- seq(40, 55, by = 0.1)
# initial condition
r <- 0.05
s <- 0.1
w <- 50000
A <- (s*w)/r^2*exp(-r)
x0 <- 0
## The function to be integrated (right-hand expression of the derivative above)
f1 <- function(x){
if(time<=40){r*x + s*w}
else {r*x - A}
}
## An empty R vector to store the results
x <- c()
## Store the initial condition in the first position of the vector
x[1] <- x0
# loop over time: approximate the function at each time step
for (i in 1:(length(time)-1)){
x[i+1] = x[i] + 0.1 * f1(x[i])
}
# plotting
plot(x~time)
legend("topleft", c("approximation"),
pch=c(1,NA), lty=c(NA,1))
# time intervals: a sequence from zero to ten at 0.5 steps
time <- seq(0, 55, by = 0.1)
time2 <- seq(40, 55, by = 0.1)
# initial condition
r <- 0.05
s <- 0.1
w <- 50000
A <- (s*w)/r^2*exp(-r)
x0 <- 3
## The function to be integrated (right-hand expression of the derivative above)
f1 <- function(x){
if(time<=40){r*x + s*w}
else {r*x - A}
}
## An empty R vector to store the results
x <- c()
## Store the initial condition in the first position of the vector
x[1] <- x0
# loop over time: approximate the function at each time step
for (i in 1:(length(time)-1)){
x[i+1] = x[i] + 0.1 * f1(x[i])
}
# plotting
plot(x~time)
legend("topleft", c("approximation"),
pch=c(1,NA), lty=c(NA,1))
